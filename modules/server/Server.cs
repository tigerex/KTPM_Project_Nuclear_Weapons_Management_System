using System;
using System.Net;
using System.Net.Sockets;
using System.Net.NetworkInformation;
using project_nuclear_weapons_management_system.modules.database;

using System.Text;
using System.Text.Json;
using System.Collections.Generic;
using BCryptNet = BCrypt.Net.BCrypt;

/// <summary>
/// Server ch·ªãu tr√°ch nhi·ªám kh·ªüi ch·∫°y m·ªôt TCP server tr√™n IP Wi-Fi c·ªßa m√°y.
/// Server n√†y:
/// - L·∫Øng nghe k·∫øt n·ªëi t·ª´ client.
/// - Log t·∫•t c·∫£ k·∫øt n·ªëi, disconnection, request v√† l·ªói th√¥ng qua Logger.
/// - H·ªó tr·ª£ d·ª´ng server c√≥ delay ho·∫∑c Ctrl+C.
/// - Ph·∫£n h·ªìi c√°c request HTTP ƒë∆°n gi·∫£n v·ªõi HTML.
/// </summary>
namespace project_nuclear_weapons_management_system.modules.server
{
    public static class ServerModule
    {

        private static TcpListener? _listener; // TCP listener
        private static bool _isRunning = false; // tr·∫°ng th√°i server ƒëang ch·∫°y
        private static bool _stopRequested = false; // flag d·ª´ng server
        private static DateTime _stopTime;  // th·ªùi ƒëi·ªÉm server d·ª´ng (n·∫øu c√≥)

        // Kh·ªüi t·∫°o class static ƒë·ªÉ g·ªçi t·ª´ global
        static ServerModule()
        {
            // X·ª≠ l√Ω Ctrl+C (CancelKeyPress) event
            Console.CancelKeyPress += (sender, e) =>
            {
                e.Cancel = true; // tr√°nh terminate ngay
                if (_isRunning)
                {
                    int delaySeconds = 10;
                    Logger.Log("[ALERT] Server stopping due to Ctrl+C / CancelKeyPress");
                    Console.WriteLine("[ALERT] Server stopping in 10 seconds");
                    _stopRequested = true;
                    _stopTime = DateTime.Now.AddSeconds(delaySeconds);
                    // Stop();
                }
            };

            // Ghi log khi process k·∫øt th√∫c
            AppDomain.CurrentDomain.ProcessExit += (sender, e) =>
            {
                Logger.Log("[INFO] Server shut down due to ProcessExit (application end).");
                Logger.Log("===== SESSION END =====\n");
                // Don't call Stop() here; process is dying anyway
            };

            // B·∫Øt l·ªói kh√¥ng handle ƒë∆∞·ª£c
            AppDomain.CurrentDomain.UnhandledException += (sender, e) =>
            {
                if (e.ExceptionObject is Exception ex)
                {
                    Logger.Log($"[ERROR] Server crashed with unhandled exception: {ex.Message}\n{ex.StackTrace}");
                    Logger.Log("===== SESSION END =====\n");
                }
                else
                {
                    Logger.Log("[ERROR] Server crashed with unhandled exception: ExceptionObject is NULL.");
                    Logger.Log("===== SESSION END =====\n");
                }
                if (_isRunning)
                {
                    Stop();
                }
            };
        }

        /// <summary>
        /// B·∫Øt ƒë·∫ßu server TCP tr√™n IP Wi-Fi t·∫°i port 9999.
        /// Server n√†y:
        /// - L·∫Øng nghe k·∫øt n·ªëi t·ª´ client.
        /// - Ghi log t·∫•t c·∫£ k·∫øt n·ªëi, disconnection, request v√† l·ªói th√¥ng qua Logger.
        /// - Ph·∫£n h·ªìi HTTP request v·ªõi n·ªôi dung HTML c∆° b·∫£n.
        /// - H·ªó tr·ª£ d·ª´ng server theo l·ªánh console ho·∫∑c Ctrl+C.
        /// </summary>
        public static void Start()
        {
            try
            {
                // L·∫•y IP Wi-Fi hi·ªán t·∫°i
                string localIP = NetworkHelper.GetLocalWiFiIPAddress();
                int port = 9999;

                _listener = new TcpListener(IPAddress.Parse(localIP), port);
                _listener.Start();
                _isRunning = true;

                Logger.Log($"‚úÖ Server started successfully at {localIP}:{port}");
                Logger.Log($"====== SESSION ACTIVITIES =====");
                Console.WriteLine($"Connect at http://{localIP}:{port}\n");
                Console.WriteLine("Type 'stop' or 'stop N' to stop the server (N = delay in seconds| default 10 seconds).");

                // V√≤ng l·∫∑p ch√≠nh c·ªßa server
                while (_isRunning)
                {
                    // --- 1. Ki·ªÉm tra l·ªánh t·ª´ console ---
                    if (Console.KeyAvailable)
                    {
                        string? command = Console.ReadLine();
                        Logger.Log("!!!Command issue!!!");
                        if (command != null && command.StartsWith("stop"))
                        {
                            string arg = command.Replace("stop", "").Trim(' ', '(', ')');
                            int delaySeconds = 10; // default
                            if (int.TryParse(arg, out int parsedDelay))
                                delaySeconds = parsedDelay;

                            _stopRequested = true;
                            _stopTime = DateTime.Now.AddSeconds(delaySeconds);

                            Logger.Log($"[ALERT] Server will stop in {delaySeconds} seconds...");
                            Console.WriteLine($"[ALERT] Server will stop in {delaySeconds} seconds...");
                        }
                    }

                    // --- 2. Ki·ªÉm tra xem c√≥ l·ªánh stop ƒë√£ ƒë·∫øn th·ªùi gian d·ª´ng ---
                    if (_stopRequested && DateTime.Now >= _stopTime)
                    {
                        Stop();
                    }

                    // --- 3. Ki·ªÉm tra n·∫øu c√≥ client k·∫øt n·ªëi ƒë·∫øn ---
                    if (_isRunning && _listener != null && _listener.Pending())
                    {
                        TcpClient client = _listener.AcceptTcpClient();
                        string clientIP = ((IPEndPoint)client.Client.RemoteEndPoint!).Address.ToString();
                        Logger.Log($"Client connected from {clientIP}");

                        try
                        {
                            using NetworkStream stream = client.GetStream();
                            stream.ReadTimeout = 30000; // 30s timeout

                            // --- 4. X·ª≠ l√Ω request t·ª´ client ---
                            while (_isRunning && client.Connected)
                            {
                                byte[] first = new byte[4096];
                                int bytesRead;

                                try
                                {
                                    bytesRead = stream.Read(first, 0, first.Length);
                                }
                                catch (IOException)
                                {
                                    Logger.Log($"[INFO] Keep-alive timeout for {clientIP}, closing connection.");
                                    break;
                                }

                                if (bytesRead == 0)
                                {
                                    Logger.Log($"[INFO] Idle client {clientIP} disconnected (no request).");
                                    break;
                                }

                                var (method, path, headers, body) = ParseHttpRequest(stream, first, bytesRead);
                                Logger.Log($"[DEBUG] {clientIP} -> {method} {path}");

                                // string response;
                                // if (method == "POST" && path == "/api/auth/login")
                                // {
                                //     response = HandleLogin(body);
                                // }
                                // else if (path.Contains("favicon.ico"))
                                // {
                                //     response = BuildHttpResponse(200, "image/x-icon", "");
                                // }
                                // else
                                // {
                                //     // Trang m·∫∑c ƒë·ªãnh (demo)
                                //     var html = "<h1>hello from project N</h1>";
                                //     response = BuildHttpResponse(200, "text/html; charset=UTF-8", html);
                                // }

                                // Factory Method + Adapter
                                var repo = new MySqlUserRepository();
                                IRequestHandler handler = HandlerFactory.Create(path, repo);
                                string response = handler.Handle(body);

                                // G·ª≠i ph·∫£n h·ªìi
                                byte[] responseBytes = Encoding.UTF8.GetBytes(response);
                                stream.Write(responseBytes, 0, responseBytes.Length);
                                stream.Flush();

                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.Log($"[ERROR] Failed to process request from {clientIP}: {ex.Message}");
                        }
                        finally
                        {
                            // --- 8. ƒê√≥ng k·∫øt n·ªëi client ---                            
                            client.Close();
                            Logger.Log($"Client {clientIP} disconnected.");
                        }
                    }

                    System.Threading.Thread.Sleep(50); // gi·∫£m t·∫£i CPU
                }
                Console.WriteLine("üõë Server stopped.");
                Logger.Log("üõë Server stopped gracefully.");
            }
            catch (Exception ex)
            {
                if (_isRunning)
                {
                    Logger.Log($"‚ùå Server error: {ex.Message}\n");
                }
                else
                {
                    Logger.Log("üõë Server stopped.");
                }
            }
        }

        /// <summary>
        /// D·ª´ng server m·ªôt c√°ch an to√†n.
        /// - Thay ƒë·ªïi tr·∫°ng th√°i _isRunning th√†nh false.
        /// - D·ª´ng TcpListener n·∫øu c√≤n ƒëang ch·∫°y.
        /// - B·∫Øt v√† b·ªè qua ObjectDisposedException n·∫øu listener ƒë√£ b·ªã dispose.
        /// </summary>
        public static void Stop()
        {
            if (_isRunning)
            {
                _isRunning = false; // ƒë√°nh d·∫•u server kh√¥ng c√≤n ch·∫°y
                try
                {
                    _listener?.Stop(); // d·ª´ng listener TCP
                }
                catch (ObjectDisposedException) { /* safe to ignore: listener ƒë√£ b·ªã dispose */ }
                finally
                {
                    // C√≥ th·ªÉ log n·∫øu mu·ªën: Logger.Log("üõë Server stopped.");
                }
            }
        }

  
        // ƒê·ªçc ƒë·∫ßy ƒë·ªß 1 HTTP request (header + body) t·ª´ stream
        private static (string Method, string Path, Dictionary<string, string> Headers, string Body)
        ParseHttpRequest(NetworkStream stream, byte[] firstChunk, int bytesRead)
        {
            var buf = new List<byte>(firstChunk.AsSpan(0, bytesRead).ToArray());

            // T√¨m \r\n\r\n k·∫øt th√∫c header
            int headerEnd = FindCrlfCrlf(buf);
            while (headerEnd == -1)
            {
                byte[] tmp = new byte[4096];
                int n = stream.Read(tmp, 0, tmp.Length);
                if (n <= 0) break;
                buf.AddRange(tmp.AsSpan(0, n).ToArray());
                headerEnd = FindCrlfCrlf(buf);
            }

            if (headerEnd == -1)
                return ("", "", new(), "");

            // headerEnd tr·∫£ v·ªÅ ch·ªâ s·ªë NGAY SAU "\r\n\r\n"
            string headerText = Encoding.UTF8.GetString(buf.GetRange(0, headerEnd - 4).ToArray());
            var lines = headerText.Split("\r\n", StringSplitOptions.RemoveEmptyEntries);
            var parts = lines[0].Split(' ', 3, StringSplitOptions.RemoveEmptyEntries);

            string method = parts[0];
            string path = parts[1];

            var headers = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            for (int i = 1; i < lines.Length; i++)
            {
                int idx = lines[i].IndexOf(':');
                if (idx > 0)
                    headers[lines[i][..idx].Trim()] = lines[i][(idx + 1)..].Trim();
            }

            int contentLength = 0;
            if (headers.TryGetValue("Content-Length", out var clStr))
                int.TryParse(clStr, out contentLength);

            // L·∫•y body (c√≥ th·ªÉ c√≤n thi·∫øu => ƒë·ªçc ti·∫øp)
            int have = buf.Count - headerEnd;
            var bodyBytes = new byte[contentLength];
            if (contentLength > 0)
            {
                int toCopy = Math.Min(contentLength, have);
                if (toCopy > 0)
                    buf.CopyTo(headerEnd, bodyBytes, 0, toCopy);

                int remaining = contentLength - toCopy;
                int offset = toCopy;
                while (remaining > 0)
                {
                    int n = stream.Read(bodyBytes, offset, remaining);
                    if (n <= 0) break;
                    offset += n;
                    remaining -= n;
                }
            }

            string body = contentLength > 0 ? Encoding.UTF8.GetString(bodyBytes) : "";
            return (method, path, headers, body);
        }

        private static int FindCrlfCrlf(List<byte> data)
        {
            for (int i = 0; i <= data.Count - 4; i++)
            {
                if (data[i] == 13 && data[i + 1] == 10 && data[i + 2] == 13 && data[i + 3] == 10)
                    return i + 4; // index ngay sau \r\n\r\n
            }
            return -1;
        }

    }
}
